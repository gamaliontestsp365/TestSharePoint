@model TestSPAppWeb.Models.DemoModel

@{
    ViewBag.Title = "TaxonomyPickerDemo";
}
@using (Html.BeginForm())
{
    <div class="ms-Grid-row">
        <div class="ms-Grid-col ms-u-sm12 ms-u-md6 ms-u-lg6 ms-u-xl4">
            <div class="ms-Table">
                <div class="ms-Table-row">
                    <span class="ms-Table-cell">
                        <label class="ms-Label is-required">
                            Select Term
                        </label>
                        @Html.Hidden("taxPickerContinent")
                    </span>
                </div>
                
                <div class="ms-Table-row">
                    <label id="lblTermID" class="ms-Label">
                        
                    </label>
                </div>
            </div>
        </div>
    </div>
}

@*<script type="text/javascript" >
  
    var context;
    $(document).ready(function () {
        var spHostUrl = decodeURIComponent(getQueryStringParameter('SPHostUrl'));
        var appWebUrl = decodeURIComponent(getQueryStringParameter('SPAppWebUrl'));
        var spLanguage = decodeURIComponent(getQueryStringParameter('SPLanguage'));

        //Build absolute path to the layouts root with the spHostUrl
        var layoutsRoot = spHostUrl + '/_layouts/15/';

        //load all appropriate scripts for the page to function
        $.getScript(layoutsRoot + 'SP.Runtime.js',
            function () {
                $.getScript(layoutsRoot + 'SP.js',
                    function () {
                        //Load the SP.UI.Controls.js file to render the App Chrome
                        //$.getScript(layoutsRoot + 'SP.UI.Controls.js', renderSPChrome);

                        //load scripts for cross site calls (needed to use the people picker control in an IFrame)
                        $.getScript(layoutsRoot + 'SP.RequestExecutor.js', function () {
                            context = new SP.ClientContext(appWebUrl);
                            var factory = new SP.ProxyWebRequestExecutorFactory(appWebUrl);
                            context.set_webRequestExecutorFactory(factory);
                        });

                        //load scripts for calling taxonomy APIs
                        $.getScript(layoutsRoot + 'init.js',
                            function () {
                                $.getScript(layoutsRoot + 'sp.taxonomy.js',
                                    function () {
                                        //termset used for dependant selection

                                        var termId = "9ac29b85-9e35-4198-b943-40f224b5d1da";

                                        //bind the taxonomy picker to the default keywords termset
                                        $('#taxPickerKeywords').taxpicker({ isMulti: true, allowFillIn: true, useKeywords: true }, context);
                                        $('#taxPickerKeywordsContainsSuggestions').taxpicker({ isMulti: true, allowFillIn: true, useKeywords: true, useContainsSuggestions: true }, context);
                                        //bind taxpickers that depend on eachothers choices
                                        $('#taxPickerContinent').taxpicker({ isMulti: false, allowFillIn: false, useKeywords: false, termSetId: termId, levelToShowTerms: 1 }, context, function () {

                                            $('#lblTermId').html(this._selectedTerms[0].Id);
                                            //$('#taxPickerCountry').taxpicker({ isMulti: false, allowFillIn: false, useKeywords: false, termSetId: termId, filterTermId: this._selectedTerms[0].Id, levelToShowTerms: 2 }, context, function () {
                                            //    $('#taxPickerRegion').taxpicker({ isMulti: false, allowFillIn: false, useKeywords: false, termSetId: termId, filterTermId: this._selectedTerms[0].Id, levelToShowTerms: 3 }, context);
                                            //});
                                        });
                                    });
                            });
                    });
            });
    });

    //function to get a parameter value by a specific key
    function getQueryStringParameter(urlParameterKey) {
        var params = document.URL.split('?')[1].split('&');
        var strParams = '';
        for (var i = 0; i < params.length; i = i + 1) {
            var singleParam = params[i].split('=');
            if (singleParam[0] == urlParameterKey)
                return singleParam[1];
        }
    }
</script>*@






